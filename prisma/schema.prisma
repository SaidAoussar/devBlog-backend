generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  firstName    String    @db.VarChar(50)
  lastName     String    @db.VarChar(50)
  email        String    @unique @db.VarChar(50)
  username     String    @unique    
  password     String?
  intro        String?
  img          String?
  active       Boolean @default(false)
  registeredAt DateTime  @default(now())
  comments     Comment[]
  posts        Post[]
  reactions    PostReactions[]
  userSaves    Save[] 
}

model Post {
  id          Int                 @id @default(autoincrement())
  title       String              @db.VarChar()
  slug        String              @unique @db.VarChar()
  content     String?
  published   Boolean             @default(true)
  cover       String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  authorId    Int
  author      User                @relation(fields: [authorId], references: [id],onDelete: Cascade)
  comments    Comment[]
  tags        TagsOnPosts[]
  reactions   PostReactions[]
  usersSave   Save[]
}

model Comment {
  id          Int       @id @default(autoincrement())
  published      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  content     String?
  postId      Int
  userId      Int
  post        Post      @relation(fields: [postId], references: [id],onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id],onDelete: Cascade)
}



model Tag {
  id    Int           @id @default(autoincrement())
  name  String
  posts TagsOnPosts[]
}

model TagsOnPosts {
  postId Int
  tagId  Int
  post   Post @relation(fields: [postId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id],onDelete: Cascade)

  @@id([postId, tagId])
}



model PostReactions{
  id Int @id @default(autoincrement())
  postId Int
  userId Int
  post Post @relation(fields: [postId],references: [id],onDelete:Cascade,onUpdate: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade,onUpdate: Cascade)
  createdAt   DateTime  @default(now())
}

model Save{
  id Int @id @default(autoincrement())
  postId Int
  userId Int
  post Post @relation(fields: [postId],references: [id],onDelete:Cascade,onUpdate: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade,onUpdate: Cascade)
  createdAt   DateTime  @default(now())
}
